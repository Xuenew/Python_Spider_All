# -*- coding:utf-8 -*-
# 享受雷霆感受雨露
# author xyy,time:2020/9/29
from fontTools.ttLib import TTFont
import requests
# 统一请求函数
def unify_requests(method="GET",url="",headers={},proxies={},data={},verify=False,cookies={}):
    if method=="GET":
        response = requests.get(url, headers=headers,proxies=proxies,data=data,cookies=cookies,timeout=5)
        return response
    else:
        response = requests.post(url, headers=headers,proxies=proxies,data=data,verify=verify,cookies=cookies,timeout=5)
        return response


def zhuan_xml():

    # 加载字体文件：
    font = TTFont('/Users/quanlifang/Desktop/my_git_file/Python_Spider_All/起点中文网详情字体加密破解/FkMwMtuL.ttf')

    # 转为xml文件：
    font.saveXML('/Users/quanlifang/Desktop/my_git_file/Python_Spider_All/起点中文网详情字体加密破解/FkMwMtuL.xml')
def get_font_yingse(font_url):
    response = unify_requests(url=font_url)
    content = response.content
    # world = TTFont('/Users/quanlifang/Desktop/my_git_file/Python_Spider_All/起点中文网详情字体加密破解/wwOMhmLd.ttf')
    world = TTFont('/Users/quanlifang/Desktop/my_git_file/Python_Spider_All/起点中文网详情字体加密破解/wwOMhmLd.ttf')
    # 读取响应的映射关系
    # uni_list = world['cmap'].tables[0].ttFont.getGlyphOrder()  # 'cmap' 表示汉字对应的映射 为unicode编码
    # print(uni_list) # 按顺序拿到各个字符的unicode编码
    # print(world.getGlyphOrder())
    # print(world.getBestCmap()) # 获得对应的字符对应的值
    # {100097: 'zero', 100099: 'nine', 100100: 'eight', 100101: 'five', 100102: 'seven', 100103: 'two', 100104: 'one', 100105: 'four', 100106: 'period', 100107: 'six', 100108: 'three'}
    # info = world.getGlyphOrder()
    # dic_info = {}
    # for each in info:
    #     # print(world['glyf'][each].coordinates)
    #     # print(list(world['glyf'][each].coordinates)) # 获得一个个的元组 判断比较就好了
    #     dic_info[each] = list(world['glyf'][each].coordinates)
    # print(dic_info)
        # {} 字典里面 对应的值对应的 list
    # print(dir(world)) # 按顺序拿到各个字符的unicode编码
    # print(dir(world["cmap"].tableTag)) # 按顺序拿到各个字符的unicode编码
    # print(dir(world["glyf"])) # 按顺序拿到各个字符的unicode编码
    # exit(0)
    # print(world['glyf']['one'].coordinates)
    # print(world['glyf']['one'])
    # print(dir(world['glyf']['one']))
    # print(world.getGlyphOrder())
    # print(world.tables)
    # print(dir(world))
    # unicode_list= [eval(r"u'\u" + uni[3:] + "'") for uni in uni_list[2:]]
    # unicode_list= [uni.encode('utf-8').decode('unicode-escape') for uni in unicode_list]
    # print('unicode_list = ', unicode_list)
    #
    # font = TTFont('898a472b.woff')    # 打开文件
    # font.saveXML('898a472b.xml')    # 保存为xml文件
    #
    # # 解析xml文件
    # from xml.etree import ElementTree as ET
    #
    # tree = ET.parse('898a472b.xml')
    # root = tree.getroot()   # 一个Element对象
    # childs = root.getchildren()
    #
    # for c in childs:
    #     for cc in c.getchildren():
    #         datas = {}
    #         datas[cc.tag] = cc.attrib
    #         print(datas, '\n\n\n')
    return world.getBestCmap()
if __name__ == '__main__':
    pass
    # tet()
    # zhuan_xml()

""":cvar

映射 字典
{'.notdef': [(256, 0), (256, 1280), (1280, 1280), (1280, 0), (288, 32), (1248, 32), (1248, 1248), (288, 1248)], 'period': [(186, 0), (186, 205), (391, 205), (391, 0)], 'zero': [(85, 723), (85, 983), (192, 1300), (403, 1472), (563, 1472), (681, 1472), (859, 1377), (975, 1198), (1041, 941), (1041, 723), (1041, 465), (935, 148), (724, -25), (563, -25), (351, -25), (230, 127), (85, 310), (270, 723), (270, 362), (439, 123), (563, 123), (687, 123), (856, 363), (856, 723), (856, 1085), (687, 1323), (561, 1323), (437, 1323), (363, 1218), (270, 1084)], 'one': [(763, 0), (583, 0), (583, 1147), (518, 1085), (307, 961), (223, 930), (223, 1104), (374, 1175), (600, 1377), (647, 1472), (763, 1472)], 'two': [(1031, 173), (1031, 0), (62, 0), (60, 65), (83, 125), (120, 224), (283, 416), (437, 542), (676, 738), (844, 967), (844, 1069), (844, 1176), (691, 1323), (568, 1323), (438, 1323), (282, 1167), (281, 1029), (96, 1048), (115, 1255), (363, 1472), (572, 1472), (783, 1472), (1029, 1238), (1029, 1065), (1029, 977), (957, 807), (790, 619), (596, 455), (434, 319), (342, 222), (312, 173)], 'three': [(86, 387), (266, 411), (297, 258), (446, 123), (553, 123), (680, 123), (855, 299), (855, 429), (855, 553), (693, 714), (568, 714), (517, 714), (441, 694), (461, 852), (479, 850), (490, 850), (605, 850), (789, 970), (789, 1095), (789, 1194), (655, 1324), (549, 1324), (444, 1324), (304, 1192), (284, 1060), (104, 1092), (137, 1273), (371, 1472), (545, 1472), (665, 1472), (867, 1369), (974, 1191), (974, 1091), (974, 996), (872, 840), (772, 794), (902, 764), (1046, 575), (1046, 433), (1046, 241), (766, -26), (552, -26), (359, -26), (104, 204)], 'four': [(662, 0), (662, 351), (26, 351), (26, 516), (695, 1466), (842, 1466), (842, 516), (1040, 516), (1040, 351), (842, 351), (842, 0), (662, 516), (662, 1177), (203, 516)], 'five': [(85, 384), (274, 400), (295, 262), (448, 123), (556, 123), (686, 123), (866, 319), (866, 481), (866, 635), (693, 813), (553, 813), (466, 813), (326, 734), (286, 671), (117, 693), (259, 1446), (988, 1446), (988, 1274), (403, 1274), (324, 880), (456, 972), (601, 972), (793, 972), (1057, 706), (1057, 497), (1057, 298), (941, 153), (800, -25), (556, -25), (356, -25), (103, 199)], 'six': [(1019, 1107), (840, 1093), (816, 1199), (772, 1247), (699, 1324), (592, 1324), (506, 1324), (441, 1276), (356, 1214), (258, 976), (256, 756), (321, 855), (509, 951), (612, 951), (792, 951), (1045, 686), (1045, 476), (1045, 338), (926, 101), (718, -25), (586, -25), (361, -25), (77, 306), (77, 686), (77, 1111), (234, 1304), (371, 1472), (603, 1472), (776, 1472), (997, 1278), (284, 475), (284, 382), (363, 212), (505, 123), (583, 123), (697, 123), (861, 307), (861, 465), (861, 617), (699, 792), (576, 792), (454, 792), (284, 617)], 'seven': [(97, 1274), (97, 1447), (1046, 1447), (1046, 1307), (906, 1158), (631, 664), (556, 403), (502, 219), (487, 0), (302, 0), (305, 173), (435, 663), (678, 1118), (815, 1274)], 'eight': [(362, 795), (250, 836), (142, 988), (142, 1094), (142, 1254), (372, 1472), (563, 1472), (755, 1472), (989, 1249), (989, 1089), (989, 987), (882, 836), (773, 795), (908, 751), (1049, 555), (1049, 419), (1049, 231), (783, -25), (566, -25), (349, -25), (83, 232), (83, 424), (83, 567), (228, 760), (326, 1100), (326, 996), (460, 864), (567, 864), (671, 864), (804, 995), (804, 1090), (804, 1189), (667, 1324), (565, 1324), (462, 1324), (326, 1192), (268, 423), (268, 346), (341, 202), (485, 123), (568, 123), (697, 123), (865, 289), (865, 417), (865, 547), (692, 717), (562, 717), (435, 717), (268, 549)], 'nine': [(112, 339), (285, 355), (307, 233), (431, 123), (528, 123), (611, 123), (736, 199), (816, 326), (870, 542), (870, 654), (870, 666), (869, 690), (815, 604), (628, 497), (519, 497), (337, 497), (85, 761), (85, 977), (85, 1200), (348, 1472), (546, 1472), (689, 1472), (926, 1318), (1049, 1033), (1049, 763), (1049, 482), (927, 149), (686, -25), (524, -25), (352, -25), (134, 166), (849, 986), (849, 1141), (684, 1323), (568, 1323), (448, 1323), (270, 1127), (270, 971), (270, 831), (439, 656), (563, 656), (688, 656), (849, 831)]}



"""

